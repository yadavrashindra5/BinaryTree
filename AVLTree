package binarysearchtree;
class Node1{
    Node1 left;
    int data;
    Node1 right;
    int height;
    public Node1 createNode(Node1 root,int x)
    {
        if(root==null)
        {
            Node1 newnode=new Node1();
            newnode.data=x;
            newnode.left=null;
            newnode.right=null;
            root=newnode;
        }
        else if(x<root.data)
        {
            root.left=createNode(root.left,x);
            
        }
        else if(x>root.data)
        {
            root.right=createNode(root.right,x);
        }
        root.height=1+Math.max(height(root.left),height(root.right));
        int bf=getBalance(root);
        
        //LL rotation case is this we have to apply Left Of Left rotation
        if(bf>1 && x<root.left.data)
        {
            return rightRotate(root);
        }
        //rr totation case is this we have to apply right of right rotation
        if(bf<-1 && x>root.right.data)
        {
            return leftRotate(root);
        }
        
        // Left Right Case
        if (bf> 1 && x > root.left.data) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
 
        // Right Left Case
        if (bf < -1 && data< root.right.data) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
        
        return root;
    }
    public Node1 rightRotate(Node1 y)
    {
        Node1 x = y.left;
        Node1 T2 = x.right;
        x.right = y;
        y.left = T2;
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        return x;
    }
    
    
   public Node1 leftRotate(Node1 x) {
        Node1 y = x.right;
        Node1 T2 = y.left;
        y.left = x;
        x.right = T2;
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        return y;
    }
    
    
    public int getBalance(Node1 root)
    {
        if(root==null)
            return 0;
        return height(root.left)-height(root.right);
    }
    public int height(Node1 root)
    {
        if(root==null)
            return 0;
        return root.height;
    }
    
    public Node1 deleteNode(Node1 root,int key)
    {
        if(root==null)
            return null;
        else if(key<root.data)
            root.left=deleteNode(root.left,key);
        else if(key>root.data)
            root.right=deleteNode(root.right,key);
        else
        {
            if(root.right==null && root.left==null)
            {
                return null;
            }
            else if(root.left==null)
            {
                return root.right;
            }
            else if(root.right==null)
            {
                return root.left;
            }
            else
            {
                Node1 temp=FindMin(root.right);
                root.data=temp.data;
                root.right=deleteNode(root.right,temp.data);
            }
        }
        
        root.height=Math.max(height(root.left),height(root.right))+1;
        int balance=getBalance(root);
        
        if(balance>1 && getBalance(root.left)>=0)
            return rightRotate(root);
        if(balance>1 && getBalance(root.left)<0)
        {
            root.left=leftRotate(root.left);
            return rightRotate(root);
        }
        if(balance<-1 && getBalance(root.right)<=0)
        {
            return leftRotate(root);
        }
        if(balance<-1 && getBalance(root.right)>0)
        {
            root.right=rightRotate(root.right);
            return leftRotate(root);
        }
        
        return root;
        
    }
    public Node1 FindMin(Node1 root)
    {
        if(root.left==null && root.right==null)
            return root;
        else if(root.left==null)
            return root;
        root=FindMin(root.left);
        return root;
    }
    
public void preOrder(Node1 root)
{
    if(root==null)
        return ;
    else
    {
        System.out.print(root.data+" "+root.height+" "+"\n");
        preOrder(root.left);
        preOrder(root.right);
    }
}
}
public class AVLTree {
    
public static void main(String args[])
{
Node1 n=new Node1();
Node1 root=null;
root=n.createNode(root,54);
root=n.createNode(root,45);
root=n.createNode(root,63);
root=n.createNode(root,36);
root=n.createNode(root,51);
root=n.createNode(root,61);
root=n.createNode(root,18);
root=n.createNode(root,39);
root=n.createNode(root,47);
root=n.createNode(root,52);
root=n.deleteNode(root,52);
root=n.deleteNode(root,36);
root=n.deleteNode(root,61);
n.preOrder(root);

}
}
